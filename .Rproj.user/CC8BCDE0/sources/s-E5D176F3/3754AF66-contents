```{r include = FALSE, echo = FALSE, error = FALSE, eval = FALSE}
install.packages("reactable")
```

<head>
<style>
h1.colorr{
font-size: 50px;
}

button{
        background-color: #f44336;
        color: white;
        padding: 15px 25px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
}
</style>
</head>

<html>
<body style="background-color:rgba(240, 240, 240, 1);">

<h2 class="colorr">
<!-- with button do not use href instead use onclick: onlcick is a javascript code -->
<button onclick = "document.location ='world.html'">
नेपाल
</button>
</h2>



<html>
<br>



```{r echo = FALSE, error = FALSE}
# this is for overall data of cases and tests in Nepal
library(readxl)
library(reactable)
nepal_overall <- read_excel("nepal_data.xlsx", sheet = "overall")

reactable(nepal_overall, 
          columns = list(
            "PCR परिक्षण गरिएको" = colDef(align = "center"),
            "कुल संक्रमित" = colDef(align = "center"),
            "कुल निको भएका" = colDef(align = "center"), 
            "कुल जटिल केस" = colDef(align = "center"),
            "कुल मृत्यु" = colDef(align = "center"),
            "सक्रिय केस" = colDef(align = "center")))
```



```{r error=FALSE, include = FALSE, echo=FALSE}
# the following 2-3 chunk is for map of nepal
library(rgdal)
library(ggplot2)
library(dplyr)
library(gpclib)
#gpclibPermit()
library(maptools)
```
<h1> नेपालको जिल्ला स्तरमा कोरोनाभाईरम संक्रमितहरुको संख्या</h1>
```{r include=FALSE, echo=FALSE}

nepal.adm3.shp <- readOGR(dsn="/Users/bibhadhungel/Desktop/webpage/NepalMaps/baselayers/NPL_adm", layer="NPL_adm3", stringsAsFactors = FALSE)

nepal.adm3.shp.df <- fortify(nepal.adm3.shp, region = "NAME_3")

#hpi.data <- read.csv("/Users/bibhadhungel/Desktop/webpage/NepalMaps/baselayers/corona.csv")
corona.data <- read_excel("nepal_data.xlsx", sheet = "map")

nepal.adm3.shp.df <- merge(nepal.adm3.shp.df, corona.data, by ="id")

map <- ggplot(data = nepal.adm3.shp.df, aes(x = long, y = lat, group = group))



# Adding labels for each district polygon
  #Now we need to show districts names in the map. Centroids calculation is bit tricky, but it works if you follow this code from stackoverflow.
centroids <- setNames(do.call("rbind.data.frame", by(nepal.adm3.shp.df, nepal.adm3.shp.df$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat')) 
  #centroids$label <- nepal.adm3.shp.df$id[match(rownames(centroids), nepal.adm3.shp.df$group)]
  
  #######################################################################
  #the above code didn7 work so i used this by my self. Be cautious if the latitude and longitude matches the district names
  #corona <- read.csv("~/Desktop/webpage/NepalMaps/baselayers/corona.csv")
  corona <- read_excel("nepal_data.xlsx", sheet = "map")
  
  centroids$label <- corona$id
  #######################################################################
  
  
  
   #Showing labels for selected districts only
  #The map looks cluttered. I am interested in districts which passes certain criteria. Lets show the names for districts for which HPI is greater than 40.
  
  centroids.selected <- centroids[centroids$label %in%
                                    (nepal.adm3.shp.df[nepal.adm3.shp.df$Cases>0,]$id),]

  
```

```{r echo=FALSE}

map + 
    geom_polygon(aes(fill = Cases), color = 'gray', size = 0.1) +
    ggtitle("Total coronavirus cases by district") +
    guides(fill=guide_colorbar(title="Total cases")) + 
    scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colorbar") +
    coord_fixed(1.3) +
    theme(legend.justification=c(0,0), legend.position=c(0.003,0)) +
    with(centroids.selected, annotate(geom="text", x = long, y = lat, label=label, size=2)) +
    theme_bare
```





```{r echo = FALSE, error = FALSE, message = FALSE, echo= FALSE}

# this chunk is for data in detail of nepalese in Nepal
nepal_detail <- read_excel("nepal_data.xlsx", sheet = "detail")
data <- nepal_detail[, c("केस संख्या", "जिल्ला", "उमेर", "लिङग", "संक्रमण मिति", "अवस्था")]

reactable(nepal_detail, 
          filterable = FALSE, 
          minRows = 30, 
          searchable = TRUE, 
          defaultPageSize = 30, 
          showPageSizeOptions = TRUE, 
          pageSizeOptions = c(30, 40, 50, 1000), 
          paginationType = "simple", 
          highlight =TRUE, 
          striped = TRUE , 
          showSortable = TRUE,
          columns = list(
            "उमेर" = colDef(na = "-", width = 40, align = "center"), 
            "थप जानकारी" = colDef(width = 400, align ="left"),
            "केस संख्या" = colDef(width = 85 , align = "center") , 
            "जिल्ला" = colDef(width = 65, align = "center"), 
            "लिङग" = colDef(width = 65, align = "center"), 
            "संक्रमण मिति" = colDef(width = 108, align = "center"),
            "निको मिति" = colDef(width = 108, align = "center"),
            "अवस्था" = colDef(width = 60, align = "center")))
                    
```






```{r echo = FALSE, eval = FALSE, error = FALSE, include = FALSE}
# this is for nepalese around the world
install.packages("rgdal")
install.packages("gpclib")
install.packages("maptool")
install.packages("Rcpp")
install.packages("tibble")
install.packages("xlsx")

```

```{r echo = FALSE, error = FALSE, message = FALSE, warning = FALSE, include=FALSE}
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)

library(Rcpp)
library(tibble)

library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
  theme_void()
)


# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")

#Map for specific regions
#Retrieve map data for one or multiple specific regions:

# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)

#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")

# Merge map and life expectancy data:
world_map <- map_data("world")

#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")


#centroids.world <- setNames(do.call("rbind.data.frame", by(world_map, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat')) 

 # centroids.world$label <- nepali_world$region
  #######################################################################
  
  
  
   #Showing labels for selected districts only
  #The map looks cluttered. I am interested in districts which passes certain criteria. Lets show the names for districts for which HPI is greater than 40.
  
 # centroids.selected.world <- centroids.world[centroids.world$label %in%
                                #    (nepal.adm3.shp.df[nepal.adm3.shp.df$Cases>0,]$id),]


```

<h1> विश्वमा रहेका कोरोना संक्रमित नेपालीहरु </h1>
```{r error = FALSE, echo = FALSE}
# Create the choropleth map. Note that, data are missing for some region in the map below:
#Use the function geom_polygon():
ggplot(corona.map, aes(long, lat, group = group))+
  geom_polygon(aes(fill = cases ), color = 'light gray', size = 0.1)+
  ggtitle("Covid-19 positive Nepali around the world") + 
  guides(fill =guide_colorbar(title="Total cases")) +
  scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colourbar" ) +
  theme(legend.justification=c(0,0), legend.position=c(0,0)) 
 # with(centroids.selected, annotate(geom="text", x = long, y = lat, label=label, size=2)) +
  #  theme_bare
```
  

```{r echo = FALSE, error = FALSE, message = FALSE, echo=FALSE}

# this chunk is for TABLE of nepalese in world
nepal_world_update <- read_excel("nepal_data.xlsx", 
                                 sheet = "nepali_world_update", range = cell_cols(3:9)) 

# dropping the columns that we dont need
nepal_world_update[4:5] <- NULL

# to rearrange columns
nepal_world_update2 <- nepal_world_update[, c(5,4,1,2,3)]
nepal_world_update <- nepal_world_update2
#data <- nepal_detail[, c("केस संख्या", "जिल्ला", "उमेर", "लिङग", "संक्रमण मिति", "अवस्था")]
names(nepal_world_update)[2] <- "देश"
names(nepal_world_update)[3] <- "केस संख्या"
names(nepal_world_update)[4] <- "मृत्यु"
names(nepal_world_update)[5] <- "निको"
names(nepal_world_update)[1] <- "क्र.सं"


reactable(nepal_world_update, 
          filterable = FALSE, 
          minRows = 20, 
          searchable = TRUE, 
          defaultPageSize = 20, 
          showPageSizeOptions = TRUE, 
          pageSizeOptions = c(20, 30, 40, 50, 1000), 
          paginationType = "simple", 
          highlight =TRUE, 
          striped = TRUE , 
          showSortable = TRUE,
           columns = list(
            "देश" = colDef(na = "-", align = "center"), 
            "मृत्यु" = colDef( align ="center"),
            "निको" = colDef( align = "center") , 
            "केस संख्या" = colDef( align = "center"),
            "क्र.सं" = colDef(align = "left")))

         # columns = list(
          #  "देश" = colDef(na = "-", width = 130, align = "left"), 
           # "मृत्यु" = colDef(width = 130, align ="center"),
            #"निको" = colDef(width = 130, align = "center") , 
            #"केस संख्या" = colDef(width = 130, align = "center")))
                    
```








<h2> कोभिड-१९ को पुर्वतयारी तथा रोकथाम सम्बन्धमा प्रदेस स्तरमा भएका क्रियाकलापहरु</h2>
<a href = "https://www.mohp.gov.np/attachments/article/577/कोरोना%20सम्बन्धी%20प्रदेशस्तरका%20कि्याकलापहरु.jpg" target = "_blank">
![covid-19](images/province.jpg)
</a>
<a href = https://heoc.mohp.gov.np target = "_blank">
<p><button>थप जानकारीको लागि  </button></p>
</a>
</body>
</html>

```{r eval = FALSE, include = FALSE}
############################################################
#library(shiny)
#library(reactable)

#ui <- fluidPage(
 # reactableOutput("table")
#)

#server <- function(input, output) {
 # output$table <- renderReactable({
  #  reactable(nepal_detail)
  #})
#}

#shinyApp(ui, server)
