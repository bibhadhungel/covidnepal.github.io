library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
# Create the choropleth map. Note that, data are missing for some region in the map below:
#Use the function geom_polygon():
ggplot(corona.map, aes(long, lat, group = group))+
geom_polygon(aes(fill = cases ), color = 'light gray', size = 0.1)+
ggtitle("Covid-19 positive Nepali around the world") +
guides(fill =guide_colorbar(title="Total cases")) +
scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colourbar" ) +
theme(legend.justification=c(0,0), legend.position=c(0,0))
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
centroids.world$label <- nepali_world$region
View(world_map)
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
centroids <- setNames(do.call("rbind.data.frame", by(world_mao, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat'))
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
centroids <- setNames(do.call("rbind.data.frame", by(world_map, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat'))
centroids.world$label <- nepali_world$region
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
centroids.world <- setNames(do.call("rbind.data.frame", by(world_map, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat'))
centroids.world$label <- nepali_world$region
View(centroids.world)
centroids.world$label <- nepali_world$region
View(centroids.world)
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
#centroids.world <- setNames(do.call("rbind.data.frame", by(world_map, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat'))
# centroids.world$label <- nepali_world$region
#######################################################################
#Showing labels for selected districts only
#The map looks cluttered. I am interested in districts which passes certain criteria. Lets show the names for districts for which HPI is greater than 40.
# centroids.selected.world <- centroids.world[centroids.world$label %in%
#    (nepal.adm3.shp.df[nepal.adm3.shp.df$Cases>0,]$id),]
# Create the choropleth map. Note that, data are missing for some region in the map below:
#Use the function geom_polygon():
ggplot(corona.map, aes(long, lat, group = group))+
geom_polygon(aes(fill = cases ), color = 'light gray', size = 0.1)+
ggtitle("Covid-19 positive Nepali around the world") +
guides(fill =guide_colorbar(title="Total cases")) +
scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colourbar" ) +
theme(legend.justification=c(0,0), legend.position=c(0,0))
# with(centroids.selected, annotate(geom="text", x = long, y = lat, label=label, size=2)) +
#  theme_bare
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# this chunk is for data in detail of nepalese in Nepal
nepal_detail <- read_excel("nepal_data.xlsx", sheet = "detail")
data <- nepal_detail[, c("केस संख्या", "जिल्ला", "उमेर", "लिङग", "संक्रमण मिति", "अवस्था")]
reactable(nepal_detail,
filterable = FALSE,
minRows = 30,
searchable = TRUE,
defaultPageSize = 30,
showPageSizeOptions = TRUE,
pageSizeOptions = c(30, 40, 50, 1000),
paginationType = "simple",
highlight =TRUE,
striped = TRUE ,
showSortable = TRUE,
columns = list(
"उमेर" = colDef(na = "-", width = 40, align = "center"),
"थप जानकारी" = colDef(width = 400, align ="left"),
"केस संख्या" = colDef(width = 80 , align = "center") ,
"जिल्ला" = colDef(width = 65, align = "center"),
"लिङग" = colDef(width = 65, align = "center"),
"संक्रमण मिति" = colDef(width = 108, align = "center"),
"निको मिति" = colDef(width = 108, align = "center"),
"अवस्था" = colDef(width = 65, align = "center")))
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
#centroids.world <- setNames(do.call("rbind.data.frame", by(world_map, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat'))
# centroids.world$label <- nepali_world$region
#######################################################################
#Showing labels for selected districts only
#The map looks cluttered. I am interested in districts which passes certain criteria. Lets show the names for districts for which HPI is greater than 40.
# centroids.selected.world <- centroids.world[centroids.world$label %in%
#    (nepal.adm3.shp.df[nepal.adm3.shp.df$Cases>0,]$id),]
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
nepali_world <- read_excel("nepal_data.xlsx", sheet = "nepali_world")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(nepali_world, world_map, by = "region")
#centroids.world <- setNames(do.call("rbind.data.frame", by(world_map, world_map$group, function(x) {Polygon(x[c('long', 'lat')])@labpt})), c('long', 'lat'))
# centroids.world$label <- nepali_world$region
#######################################################################
#Showing labels for selected districts only
#The map looks cluttered. I am interested in districts which passes certain criteria. Lets show the names for districts for which HPI is greater than 40.
# centroids.selected.world <- centroids.world[centroids.world$label %in%
#    (nepal.adm3.shp.df[nepal.adm3.shp.df$Cases>0,]$id),]
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# Create the choropleth map. Note that, data are missing for some region in the map below:
#Use the function geom_polygon():
ggplot(corona.map, aes(long, lat, group = group))+
geom_polygon(aes(fill = cases ), color = 'light gray', size = 0.1)+
ggtitle("Covid-19 positive cases around the world") +
guides(fill =guide_colorbar(title="Total cases")) +
scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colourbar" ) +
theme(legend.justification=c(0,0), legend.position=c(0,0))
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
world_corona <- read_excel("world.xlsx", sheet = "world_map")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(world_corona, world_map, by = "region")
# Create the choropleth map. Note that, data are missing for some region in the map below:
#Use the function geom_polygon():
ggplot(corona.map, aes(long, lat, group = group))+
geom_polygon(aes(fill = cases ), color = 'light gray', size = 0.1)+
ggtitle("Covid-19 positive cases around the world") +
guides(fill =guide_colorbar(title="Total cases")) +
scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colourbar" ) +
theme(legend.justification=c(0,0), legend.position=c(0,0))
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("reactable")
install.packages("reactable")
<head>
<style>
h1.colorr{
font-size: 50px;
}
button{
background-color: #f44336;
color: white;
padding: 15px 25px;
text-align: center;
text-decoration: none;
display: inline-block;
}
</style>
</head>
<html lang ="ne">
<body style="background-color:rgba(240, 240, 240, 1);">
<h2 class="colorr">
<!-- with button do not use href instead use onclick: onlcick is a javascript code -->
<button onclick = "document.location ='world.html'">
नेपाल
</button>
</h2>
<html>
<br>
# this is for overall data of cases and tests in Nepal
library(readxl)
library(reactable)
nepal_overall <- read_excel("nepal_data.xlsx", sheet = "overall")
reactable(nepal_overall,
columns = list(
"PCR परिक्षण गरिएको" = colDef(align = "center"),
"कुल संक्रमित" = colDef(align = "center"),
"कुल निको भएका" = colDef(align = "center"),
"कुल जटिल केस" = colDef(align = "center"),
"कुल मृत्यु" = colDef(align = "center"),
"सक्रिय केस" = colDef(align = "center")))
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# this is for overall data of cases and tests in Nepal
library(readxl)
library(reactable)
nepal_overall <- read_excel("nepal_data.xlsx", sheet = "overall")
reactable(nepal_overall, language = reactableLang(
columns = list(
"PCR परिक्षण गरिएको" = colDef(align = "center"),
"कुल संक्रमित" = colDef(align = "center"),
"कुल निको भएका" = colDef(align = "center"),
"कुल जटिल केस" = colDef(align = "center"),
"कुल मृत्यु" = colDef(align = "center"),
"सक्रिय केस" = colDef(align = "center"))))
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
total_case <- unname(world_detail[2,5])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,2])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
rmarkdown::render_site()
View(world)
rmarkdown::render_site()
rmarkdown::render_site()
# this chunk is for data in detail of nepalese in Nepal
nepal_detail <- read_excel("nepal_data.xlsx", sheet = "detail")
data <- nepal_detail[, c("केस संख्या", "जिल्ला", "उमेर", "लिङग", "संक्रमण मिति", "अवस्था")]
reactable(nepal_detail,
filterable = FALSE,
minRows = 30,
searchable = TRUE,
defaultPageSize = 30,
showPageSizeOptions = TRUE,
pageSizeOptions = c(30, 40, 50, 1000),
paginationType = "simple",
highlight =TRUE,
striped = TRUE ,
showSortable = TRUE,
columns = list(
"उमेर" = colDef(na = "-", width = 40, align = "center"),
"थप जानकारी" = colDef(width = 400, align ="left"),
"केस संख्या" = colDef(width = 85 , align = "center") ,
"जिल्ला" = colDef(width = 65, align = "center"),
"लिङग" = colDef(width = 65, align = "center"),
"संक्रमण मिति" = colDef(width = 108, align = "center"),
"निको मिति" = colDef(width = 108, align = "center"),
"अवस्था" = colDef(width = 60, align = "center")))
total_case <- unname(world_detail[2,2])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
<div class="alert alert-info" role="alert">
<a href="https://experience.arcgis.com/experience/685d0ace521648f8a5beeeee1b9125cd" class="alert-link">
<h1>
<span lang ="ne"> कुल संक्रमित राष्ट्रहरु</span>
</h1>
</a>
</div>
<h2>
214
</h2>
total_case <- unname(world_detail[2,8])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,7])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,5])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,2])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
rmarkdown::render_site()
total_case <- unname(world_detail[2,2])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,4])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,5])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,8])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,7])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
total_case <- unname(world_detail[2,2])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,4])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,5])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,8])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
total_case <- unname(world_detail[2,7])
kable(total_case, format.args = list(decimal.mark = '.', big.mark = ","))
rmarkdown::render_site()
rmarkdown::render_site()
