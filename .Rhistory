# common plot options
g <- list(
scope = 'africa',
showframe = F,
showland = T,
landcolor = toRGB("grey90")
)
g1 <- c(
g,
resolution = 50,
showcoastlines = T,
countrycolor = toRGB("white"),
coastlinecolor = toRGB("white"),
projection = list(type = 'Mercator'),
list(lonaxis = list(range = c(-15, -5))),
list(lataxis = list(range = c(0, 12))),
list(domain = list(x = c(0, 1), y = c(0, 1)))
)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
# restrict from June to September
df <- subset(df, Month %in% 6:9)
# ordered factor variable with month abbreviations
df$abbrev <- ordered(month.abb[df$Month], levels = month.abb[6:9])
# September totals
df9 <- subset(df, Month == 9)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
# restrict from June to September
df <- subset(df, Month %in% 6:9)
# ordered factor variable with month abbreviations
df$abbrev <- ordered(month.abb[df$Month], levels = month.abb[6:9])
# September totals
df9 <- subset(df, Month == 9)
# common plot options
g <- list(
scope = 'africa',
showframe = F,
showland = T,
landcolor = toRGB("grey90")
)
library(maps)
map('world', fill = TRUE, col = "grey")
install.packages("maps")
library(maps)
map('world', fill = TRUE, col = "grey")
install.packages("maps")
library(maps)
map('world', fill = TRUE, col = "grey")
install.packages("maps")
library(maps)
map('world', fill = TRUE, col = "grey")
install.packages("maps")
install.packages("ChoropethRmaps")
library(maps)
map('world', fill = TRUE, col = "grey")
install.packages("maps")
install.packages("ChoropethRmaps")
library(maps)
library("ChoropethRmaps")
map('world', fill = TRUE, col = "grey")
install.packages("maps")
library("choroplethrMaps")
library(maptools)
library(maps)
country_choropleth(df, title = "", legend = "", num_colors = 7,
zoom = NULL)
install.packages("choroplethrMaps")
library(choroplethrMaps)
country_choropleth(df, title = "", legend = "", num_colors = 7,
zoom = NULL)
country_choropleth()
country_choropleth(df, title = "", legend = "", num_colors = 7,
zoom = NULL)
country_choropleth()
CountryChoropleth = R6Class("CountryChoropleth",
inherit = Choropleth,
public = list(
initialize = function(user.df)
{
if (!requireNamespace("choroplethrMaps", quietly = TRUE)) {
stop("Package choroplethrMaps is needed for this function to work. Please install it.", call. = FALSE)
}
data(country.map, package="choroplethrMaps", envir=environment())
super$initialize(country.map, user.df)
if (private$has_invalid_regions)
{
warning("Please see ?country.regions for a list of mappable regions")
}
}
)
)
install.packages("maps")
library(maps)
install.packages("choroplethrMaps")
library(choroplethrMaps)
map('world', fill = TRUE, col = "grey")
install.packages("maps")
install.packages("choroplethrMaps")
library(sf)
install.packages(c("raster", "sf", "spData"))
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library(shiny)   # for web applications
# In addition, it uses the following visualization packages:
install.packages("tmap","leaflet","mapview")
library(tmap)    # for static and interactive maps
# In addition, it uses the following visualization packages:
install.packages("tmap","leaflet","mapview")
library(leaflet) # for interactive maps
install.packages("leaflet")
yes
install.packages("leaflet")
install.packages("mapview")
# In addition, it uses the following visualization packages:
install.packages("tmap")
# Add fill layer to nz shape
tm_shape(nz) +
tm_fill()
library(tmap)    # for static and interactive maps
# In addition, it uses the following visualization packages:
install.packages("tmap")
library(tmap)    # for static and interactive maps
# Add fill layer to nz shape
tm_shape(nz) +
tm_fill()
# In addition, it uses the following visualization packages:
install.packages("tmap")
library(leaflet)
plot(st_geometry(nz), col = nz$Land_area)  # works
library(sf)
install.packages("sf")
install.packages("sf")
library(sf)
library(raster)
library(plyr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(foreign, lib.loc = "/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(tidyr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(sf)
library(raster)
library(dplyr)
library(spData)
install.packages("spData")
library(spData)
install.packages('spDataLarge', repos='https://nowosad.github.io/drat/', type='source')
library(spData)
library(spDataLarge)
# In addition, it uses the following visualization packages:
install.packages("tmap")
install.packages("tmap")
library(tmap)    # for static and interactive maps
# In addition, it uses the following visualization packages:
install.packages("tmap")
install.packages("tmap")
library(tmap)    # for static and interactive maps
install.packages("mapdata")
library(ggplot2)
library(readr)
library(dplyr)
library(viridis)
library(mapproj) # for coord_map()
install.packages("mapproj")
library(mapproj) # for coord_map()
library(viridis)
map('japan', "Kyoto")
map(world)
map('world)
map('world')
map('japan')
map('japan')
df <- map_data("japan")
install.packages("namespace")
library(namespace)
map('japan')
df <- map_data("japan")
view("world")
world
library(mapdata)
world <- geojsonio::geojson_read("/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json", what = "sp")
install.packages("geojsonio")
library(geojasonio)
library(geojsonio)
world <- geojsonio::geojson_read("/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json", what = "sp")
install.packages("geojsonio")
library(geojson)
library(geojsonio)
library(geojsonsf)
world <- geojsonio::geojson_read("/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json", what = "sp")
<!DOCTYPE html>
<html>
<head>
<title>Leaflet GeoJSON Example</title>
<meta charset="utf-8" />
<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.1/leaflet.css" />
<style type="text/css">
.leaflet-container{background-color:#c5e8ff;}
</style>
</head>
<body>
<div id="map" style="width: 600px; height: 400px"></div>
<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="http://cdn.leafletjs.com/leaflet-0.7.1/leaflet.js"></script>
<script>
var myGeoJSONPath = 'path/to/mymap.geo.json';
var myCustomStyle = {
stroke: false,
fill: true,
fillColor: '#fff',
fillOpacity: 1
}
$.getJSON(/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json,function(data){
var map = L.map('map').setView([39.74739, -105], 4);
L.geoJson(data, {
clickable: false,
style: myCustomStyle
}).addTo(map);
})
</script>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
<title>Leaflet GeoJSON Example</title>
<meta charset="utf-8" />
<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.1/leaflet.css" />
<style type="text/css">
.leaflet-container{background-color:#c5e8ff;}
</style>
</head>
<body>
<div id="map" style="width: 600px; height: 400px"></div>
<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="http://cdn.leafletjs.com/leaflet-0.7.1/leaflet.js"></script>
<script>
var myGeoJSONPath = 'path/to/mymap.geo.json';
var myCustomStyle = {
stroke: false,
fill: true,
fillColor: '#fff',
fillOpacity: 1
}
$.getJSON(/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json,function(data){
var map = L.map('map').setView([39.74739, -105], 4);
L.geoJson(data, {
clickable: false,
style: myCustomStyle
}).addTo(map);
})
</script>
</body>
</html>
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages(c("classInt", "lwgeom", "mapdeck", "raster", "sf"))
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
library(geojsonio)
install.packages("geojsonio")
library(geojsonio)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
world <- geojsonio::geojson_read("/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json", what = "sp")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages(c("mapview", "tmap"))
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
world <- geojsonio::geojson_read("/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json", what = "sp")
class(states)
View(world)
View(world)
names(states)
View(world)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp"))
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
library(geojson)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
library(geojsonio)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
View(spdf)
View(world)
View(spdf)
world <- geojson_read("/Users/bibhadhungel/Desktop/webpage/Worldmap/custom.geo.json", what = "sp")
spdf <- world[ substr(spdf@data$code,1,2)  %in% c("06", "83", "13", "30", "34", "11", "66") , ]
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
gtd        <- read.csv("/Users/bibhadhungel/Desktop/webpage/covidnepal.github.io/nepali_world.xlsx")
gtd        <- read.xlsx"/Users/bibhadhungel/Desktop/webpage/covidnepal.github.io/nepali_world.xlsx")
library(readxl)
nepali_world <- read_excel("nepali_world.xlsx")
View(nepali_world)
gtd.recent <- aggregate(nkill~country_txt,gtd.recent,sum)
gtd.recent <- gtd[gtd$Cases>0,]
gtd.recent <- aggregate(nkill~country_txt,gtd.recent,sum)
gtd.recent <- aggregate(cases~deaths,gtd.recent,sum)
gtd.recent <- aggregate(Country~deaths,gtd.recent,sum)
gtd.recent <- aggregate(Country~deaths,gtd.recent,sum)
gtd.recent <- aggregate(Cases~Country,gtd.recent,sum)
gtd <- nepali_world <- read_excel("nepali_world.xlsx")
gtd.recent <- gtd[gtd$Cases>0,]
gtd.recent <- aggregate(Cases~Country,gtd.recent,sum)
View(gtd.recent)
gtd.recent <- aggregate(Country~Deaths,gtd.recent,sum)
gtd.recent <- aggregate(Country~Death,gtd.recent,sum)
View(gtd)
gtd.recent <- aggregate(Country~Deaths,gtd.recent,sum)
gtd <- nepali_world <- read_excel("nepali_world.xlsx")
gtd.recent <- gtd[gtd$Cases>0,]
gtd.recent <- aggregate(Country~Deaths,gtd.recent,sum)
gtd.recent <- aggregate(Deaths~Country,gtd.recent,sum)
#join data to a map
gtdMap <- joinCountryData2Map( gtd.recent,
nameJoinColumn="Country",
joinCode="NAME" )
gtd <- nepali_world <- read_excel("nepali_world.xlsx")
gtd.recent <- gtd[gtd$Cases>0,]
gtd.recent <- gtd[gtd$sases>0,]
gtd.recent <- gtd[gtd$cases>0,]
gtd.recent <- aggregate(deaths~country,gtd.recent,sum)
#join data to a map
gtdMap <- joinCountryData2Map( gtd.recent,
nameJoinColumn="Country",
joinCode="NAME" )
#join data to a map
gtdMap <- joinCountryData2Map( gtd.recent,
nameJoinColumn="country",
joinCode="NAME" )
View(gtdMap)
mapDevice('x11') #create a world shaped window
#plot the map
mapCountryData( gtdMap,
nameColumnToPlot='nkill',
catMethod='fixedWidth',
numCats=100 )
#plot the map
mapCountryData( gtdMap,
nameColumnToPlot='cases',
catMethod='fixedWidth',
numCats=100 )
View(gtdMap)
library(ggplot2)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("dplyr")
rmarkdown::render_site()
library(rgdal)
library(gpclib)
gpclibPermit()
# this is for nepalese around the world
install.packages("rgdal")
install.packages("gpclib")
install.packages("maptool")
install.packages("rgdal")
install.packages("gpclib")
install.packages("Rcpp")
install.packages("tibble")
install.packages("xlsx")
install.packages("gpclib")
install.packages("Rcpp")
install.packages("tibble")
install.packages("xlsx")
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
world_map <- map_data("world")
library(readxl)
world_corona <- read_excel("world.xlsx", sheet = "world_map")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(world_corona, world_map, by = "region")
# Create the choropleth map. Note that, data are missing for some region in the map below:
#Use the function geom_polygon():
ggplot(corona.map, aes(long, lat, group = group))+
geom_polygon(aes(fill = cases ), color = 'light gray', size = 0.1)+
ggtitle("Covid-19 positive Nepali around the world") +
guides(fill =guide_colorbar(title="Total cases")) +
scale_fill_gradient(high = "#e34a33", low = "#fee8c8", guide = "colourbar" ) +
theme(legend.justification=c(0,0), legend.position=c(0,0))
# this is for overall data of cases and deaths in World
world_detail <- read_excel("world.xlsx", sheet = "Upload", range = cell_cols(2:9))
reactable(world_detail,
filterable = FALSE,
minRows = 20,
searchable = TRUE,
defaultPageSize = 20,
showPageSizeOptions = TRUE,
pageSizeOptions = c(20, 100, 150, 200, 300),
paginationType = "simple",
highlight =TRUE,
showSortIcon = TRUE,
showSortable = TRUE,
striped = TRUE ,
columns = list(
"देश" = colDef(align = "center"),
"कुल संक्रमण" = colDef(align = "center"),
"आजको थप" = colDef(align = "center" ,  width =  130),
"जटिल" = colDef(align = "center"),
"कुल मृत्यु" = colDef(align = "center"),
"आजको मृत्यु" = colDef(align = "center"),
"निको" = colDef(align = "center"),
"सक्रिय" = colDef(align = "center")))
library(reactable)
# this is for overall data of cases and deaths in World
world_detail <- read_excel("world.xlsx", sheet = "Upload", range = cell_cols(2:9))
library(reactable)
reactable(world_detail,
filterable = FALSE,
minRows = 20,
searchable = TRUE,
defaultPageSize = 20,
showPageSizeOptions = TRUE,
pageSizeOptions = c(20, 100, 150, 200, 300),
paginationType = "simple",
highlight =TRUE,
showSortIcon = TRUE,
showSortable = TRUE,
striped = TRUE ,
columns = list(
"देश" = colDef(align = "center"),
"कुल संक्रमण" = colDef(align = "center"),
"आजको थप" = colDef(align = "center" ,  width =  130),
"जटिल" = colDef(align = "center"),
"कुल मृत्यु" = colDef(align = "center"),
"आजको मृत्यु" = colDef(align = "center"),
"निको" = colDef(align = "center"),
"सक्रिय" = colDef(align = "center")))
rmarkdown::render_site()
# it is necessary to install the following packages in order to be able to run the first command
library(knitr)
library(png)
library(rmarkdown)
rmarkdown::render_site()
library(rgdal)
library(gpclib)
gpclibPermit()
library(maptools)
library(Rcpp)
library(tibble)
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
# Create a simple map
#World map
#Retrieve the world map data:
world_map <- map_data("world")
#Map for specific regions
#Retrieve map data for one or multiple specific regions:
# Make a choropleth Map
# World map colored by corona cases
# creating nepali corona cases in world file
library(readxl)
#library(xlsx)
#nepali_world <- read_excel("nepali_world.xlsx")
world_corona <- read_excel("world.xlsx", sheet = "world_map")
# Merge map and life expectancy data:
world_map <- map_data("world")
#corona.map <- merge(world_map, nepali_world, by ="region")
corona.map <- left_join(world_corona, world_map, by = "region")
rmarkdown::render_site()
library("htmltools")
library("vembedr")
library(prettydoc)
rmarkdown::clean_site()
install.packages('excelR')
library(excelR)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("reactable")
install.packages("reactable")
library(reactable)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# it is necessary to install the following packages in order to be able to run the first command
library(knitr)
library(png)
library(rmarkdown)
library("htmltools")
library("vembedr")
library(prettydoc)
rmarkdown::clean_site()
library(excelR)
